// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract StudentRecords {
    struct Student {
        uint256 rollNumber;
        string name;
        bool exists;
    }

    // State variables
    mapping(uint256 => Student) private students;
    uint256[] private rollNumbers;
    address public admin;

    // Events
    event StudentAdded(uint256 rollNumber, string name);
    event StudentUpdated(uint256 rollNumber, string name);
    event StudentRemoved(uint256 rollNumber);

    // Constructor
    constructor() {
        admin = msg.sender;
    }

    // Modifiers
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    modifier studentExists(uint256 _rollNumber) {
        require(students[_rollNumber].exists, "Student does not exist");
        _;
    }

    modifier studentNotExists(uint256 _rollNumber) {
        require(!students[_rollNumber].exists, "Student already exists");
        _;
    }

    // Functions
    function addStudent(uint256 _rollNumber, string memory _name) public onlyAdmin studentNotExists(_rollNumber) {
        require(bytes(_name).length > 0, "Name cannot be empty");
        
        students[_rollNumber] = Student(_rollNumber, _name, true);
        rollNumbers.push(_rollNumber);
        
        emit StudentAdded(_rollNumber, _name);
    }

    function getStudent(uint256 _rollNumber) public view studentExists(_rollNumber) returns (uint256 rollNumber, string memory name) {
        Student memory student = students[_rollNumber];
        return (student.rollNumber, student.name);
    }

    function updateStudent(uint256 _rollNumber, string memory _name) public onlyAdmin studentExists(_rollNumber) {
        require(bytes(_name).length > 0, "Name cannot be empty");
        
        students[_rollNumber].name = _name;
        
        emit StudentUpdated(_rollNumber, _name);
    }

    function removeStudent(uint256 _rollNumber) public onlyAdmin studentExists(_rollNumber) {
        // Find and remove roll number from array
        for (uint256 i = 0; i < rollNumbers.length; i++) {
            if (rollNumbers[i] == _rollNumber) {
                // Replace with the last element and then pop
                rollNumbers[i] = rollNumbers[rollNumbers.length - 1];
                rollNumbers.pop();
                break;
            }
        }
        
        delete students[_rollNumber];
        
        emit StudentRemoved(_rollNumber);
    }

    function getAllStudents() public view returns (uint256[] memory) {
        return rollNumbers;
    }

    function getStudentCount() public view returns (uint256) {
        return rollNumbers.length;
    }

    function transferAdmin(address _newAdmin) public onlyAdmin {
        require(_newAdmin != address(0), "Invalid address");
        admin = _newAdmin;
    }
}
